(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Canvas = /** @class */ (function () {
    function Canvas() {
        this.Height = window.innerHeight;
        this.Width = window.innerWidth;
        this.canvas = document.getElementById('mainScreen');
        this.canvas.width = this.Width;
        this.canvas.height = this.Height;
        this.Ctx = this.canvas.getContext("2d");
    }
    Canvas.prototype.Clear = function () {
        if (this.Ctx == null)
            return;
        this.Ctx.clearRect(0, 0, this.Width, this.Height);
    };
    return Canvas;
}());
exports.Canvas = Canvas;

},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Vector_1 = require("../../shared/Vector");
var Render = /** @class */ (function () {
    function Render(ctx, position, size, spriteSheet, text, fontSize) {
        if (spriteSheet === void 0) { spriteSheet = ""; }
        if (text === void 0) { text = ""; }
        if (fontSize === void 0) { fontSize = 12; }
        this._velocity = new Vector_1.Vector(0, 0);
        // Animation
        this._spriteSheet = new Image();
        this._windowPosition = new Vector_1.Vector(0, 0);
        this._windowSize = new Vector_1.Vector(0, 0);
        this._windowTicks = 1;
        this._speed = 1;
        this._frame = 0;
        this._isSprite = true;
        this._endPosition = new Vector_1.Vector(0, 0);
        this._startTime = 0;
        if (spriteSheet != "") {
            this._spriteSheet = new Image();
            this._spriteSheet.src = spriteSheet;
            this._windowSize = new Vector_1.Vector(this._spriteSheet.width, this._spriteSheet.height);
        }
        else {
            this._isSprite = false;
        }
        this._ctx = ctx;
        this._position = position;
        this._size = size;
        this._text = text;
        this._fontSize = fontSize;
    }
    Render.prototype.SetText = function (text, fontSize) {
        this._text = text;
        this._fontSize = fontSize;
    };
    Render.prototype.SetRenderLocation = function (position, size) {
        if (size === void 0) { size = this._size; }
        this._position = position;
        this._size = size;
    };
    Render.prototype.SetAnimationFrame = function (windowPosition, windowSize, windowTicks, speed) {
        if (speed === void 0) { speed = 5; }
        this._windowPosition = windowPosition;
        this._windowSize = windowSize;
        this._windowTicks = windowTicks;
        this._speed = speed;
    };
    Render.prototype.Draw = function () {
        // Render Sprite / Animation
        if (this._isSprite) {
            if (((Date.now() - this._startTime) / 1000) > (this._speed / this._windowTicks)) {
                this._frame++;
                this._startTime = Date.now();
                if (this._frame >= this._windowTicks)
                    this._frame = 0;
            }
            this._ctx.drawImage(this._spriteSheet, this._windowPosition.x + (this._frame * this._windowSize.x), this._windowPosition.y, this._windowSize.x, this._windowSize.y, this._position.x, this._position.y, this._size.x, this._size.y);
        }
        // Render text
        if (this._text != "") {
            this._ctx.fillText(this._text, this._position.x, this._position.y, this._fontSize);
        }
        // Move animation
        if (Math.abs(this._position.x - this._endPosition.x) > this._velocity.x &&
            Math.abs(this._position.y - this._endPosition.y) > this._velocity.y) {
            this._position.x += this._velocity.x;
            this._position.y += this._velocity.y;
        }
    };
    Render.prototype.MoveObject = function (endPosition, speed) {
        if (speed === void 0) { speed = 1; }
        var difX = endPosition.x - this._position.x;
        var difY = endPosition.y - this._position.y;
        var mag = Math.sqrt(difX * difX + difY * difY);
        this._velocity = new Vector_1.Vector((difX / mag) * speed, (difY / mag) * speed);
        this._endPosition = endPosition;
    };
    return Render;
}());
exports.Render = Render;

},{"../../shared/Vector":4}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Canvas_1 = require("./Canvas");
var Render_1 = require("./Render");
var Vector_1 = require("../../shared/Vector");
window.onload = function () {
    var canvas = new Canvas_1.Canvas();
    if (canvas.Ctx == null)
        return;
    var planetRender = new Render_1.Render(canvas.Ctx, new Vector_1.Vector(100, 100), new Vector_1.Vector(100, 100), "./Content/planetTest.png");
    var staticPlanet = new Render_1.Render(canvas.Ctx, new Vector_1.Vector(300, 300), new Vector_1.Vector(100, 100), "./Content/singlePlanetTest.png");
    planetRender.SetAnimationFrame(new Vector_1.Vector(0, 0), new Vector_1.Vector(100, 100), 50, 10);
    staticPlanet.MoveObject(new Vector_1.Vector(200, 200));
    var render = function () {
        canvas.Clear();
        staticPlanet.MoveObject(new Vector_1.Vector(1000, 500), 1);
        staticPlanet.Draw();
        planetRender.Draw();
        window.requestAnimationFrame(render);
    };
    render();
};

},{"../../shared/Vector":4,"./Canvas":1,"./Render":2}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Vector = /** @class */ (function () {
    function Vector(x, y) {
        this.x = x;
        this.y = y;
    }
    return Vector;
}());
exports.Vector = Vector;

},{}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
